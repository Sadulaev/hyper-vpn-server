import { Controller, Post, Req, Res } from '@nestjs/common';
import { PaymentsService } from './payments.service';
import { ConfigService } from '@nestjs/config';
import { Markup, Telegraf } from 'telegraf';
import * as bodyParser from 'body-parser'; // –≤ main.ts –ø–æ–≤–µ—Å–∏—Ç–µ app.use(bodyParser.urlencoded({extended:true}))
import { getVlessKey } from 'utils/getVlessKey';
import { CommonCallbacks } from 'enums/callbacks.enum';

@Controller('/')
export class RobokassaController {
    private bot: Telegraf;

    constructor(
        private readonly payments: PaymentsService,
        private readonly configService: ConfigService,
    ) {
        this.bot = new Telegraf(this.configService.get('TG_TOKEN')!);
    }

    @Post('payment/approve') // ResultURL (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π)
    async result(@Req() req: any, @Res() res: any) {

        const { OutSum, InvId, SignatureValue, ...rest } = req.body;

        const orderId = InvId;
        if (!orderId) {
            return res.status(400).send('no order');
        }

        const sess = await this.payments.findOrderByInvId(orderId);
        if (!sess) {
            await this.bot.telegram.sendMessage(
                sess.telegramId,
                `–°–Ω—è–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–æ –Ω–µ –≤—ã–¥–∞–ª–∏ –∫–ª—é—á? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`,
            );

            return res.redirect('https://t.me/bekvpn_bot');
        }


        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (sess.status !== "paid") {
            await this.payments.markPaidByInvId(orderId);

            const vlessKey = await getVlessKey(sess.period);

            const buttons = Markup.inlineKeyboard([
                {
                    text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Hyper VPN üìç',
                    callback_data: CommonCallbacks.GetInstructions,
                },
                {
                    text: '–¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ö†Ô∏è',
                    url: 'https://t.me/hyper_vpn_help'
                },
                {
                    text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                    callback_data: CommonCallbacks.GetMenu
                },
            ], { columns: 1 });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try {
                await this.bot.telegram.sendMessage(
                    sess.telegramId,
                    `–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞
HyperVPN –Ω–∞ ${sess.period} –º–µ—Å—è—Ü${sess.period === 1 ? '' : sess.period >= 4 ? '–µ–≤' : '–∞'}! ‚úÖ 
 
–í–∞—à –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫–ª—é—á (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)

<pre>${vlessKey}</pre>

–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é`,
                    { parse_mode: 'HTML', reply_markup: buttons.reply_markup }
                );
            } catch (e) {
                // –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –∫–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
                console.error('Telegram send error', e);
            }
        }

        return res.send('OK');
    }

    @Post('payment/success') // SuccessURL (—Ä–µ–¥–∏—Ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞) ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é + —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É "—É—Å–ø–µ—Ö"
    async success(@Req() req: any, @Res() res: any) {
        return res.redirect('https://t.me/bekvpn_bot');
    }

    @Post('fail') // SuccessURL (—Ä–µ–¥–∏—Ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞) ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é + —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É "—É—Å–ø–µ—Ö"
    async fail(@Req() req: any, @Res() res: any) {
        // –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–¥–ø–∏—Å—å —Å PASS1, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç
        return res.redirect('https://t.me/bekvpn_bot');
    }
}