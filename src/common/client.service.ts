import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { InjectBot } from "nestjs-telegraf";
import config from "src/config";
import { Client } from "./client.entity";
import { User } from "src/user/user.entity";
import { Context, Telegraf } from "telegraf";
import { ILike, Repository } from "typeorm";
import { CustomContext } from "types/context";
import callbackToObj from "utils/callbackToObj";
import saveFileFromTG from "utils/saveFileFromTG";
import clientInfoMessage from "messages/client-info.message";
import inlineButtonsPages from "button-templates/inlineButtonsPages";
import { CommonCallbacks } from "enums/callbacks.enum";
import inlineButtonsList from "button-templates/inlineButtonsList";

@Injectable()
export class ClientService {
    constructor(
        @InjectRepository(User) private userRepository: Repository<User>,
        @InjectRepository(Client) private clientRepository: Repository<Client>,
        @InjectBot() private readonly bot: Telegraf<Context>,
    ) { }

    async onFillCreateClientInfo(ctx: CustomContext) {
        if (ctx.session?.createClientInfo) {
            if (ctx.session?.createClientInfo?.step === 'fullName') {
                ctx.session.createClientInfo.fullName = ctx.message.text;
                ctx.session.createClientInfo.step = 'birthDate';

                ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏)')
            } else if (ctx.session?.createClientInfo?.step === 'birthDate') {
                ctx.session.createClientInfo.birthDate = ctx.message.text;
                ctx.session.createClientInfo.step = 'phone'

                ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏)')
            } else if (ctx.session?.createClientInfo?.step === 'phone') {
                ctx.session.createClientInfo.phone = ctx.message.text === '.' ? null : ctx.message.text;
                ctx.session.createClientInfo.step = 'images';

                ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
            } else if (ctx.session?.createClientInfo?.step === 'images' && !ctx.message.photo) {
                const creator = await this.userRepository.findOne({ where: { id: ctx.message.from.id } })

                const newClient = new Client();

                newClient.fullName = ctx.session.createClientInfo.fullName;
                newClient.birthDate = ctx.session.createClientInfo.birthDate;
                newClient.phone = ctx.session.createClientInfo.phone;
                newClient.user = creator || null;

                await this.clientRepository.save(newClient);

                ctx.session.createClientInfo = undefined;
                ctx.reply('–ö–ª–∏–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
            }
        }
    }

    async onFillClientImages(ctx: CustomContext) {
        if (ctx.session?.createClientInfo?.step === 'images') {
            const savedImageName = await saveFileFromTG(ctx, this.bot);
            ctx.session.createClientInfo.images.push(savedImageName);

            if ((ctx.message.media_group_id && ctx.session.createClientInfo.images?.length === 2) || !ctx.message.media_group_id) {

                const creator = await this.userRepository.findOne({ where: { id: ctx.message.from.id } })

                const newClient = new Client();

                newClient.fullName = ctx.session.createClientInfo.fullName;
                newClient.birthDate = ctx.session.createClientInfo.birthDate;
                newClient.phone = ctx.session.createClientInfo.phone;
                newClient.user = creator || null;
                newClient.images = ctx.session.createClientInfo.images.length ? JSON.stringify({ documents: ctx.session.createClientInfo.images }) : null;

                await this.clientRepository.save(newClient);

                ctx.session.createClientInfo = undefined;
                ctx.reply('–ö–ª–∏–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
            }
        }
    }

    async getMyClients(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            page: string;
        };


        const user = await this.userRepository.findOne({ where: { id: ctx.callbackQuery.from.id } })

        if ((!user && ctx.callbackQuery.from.id === +config().tg.admin) || user) {
            const clientsPagination = await this.clientRepository.find({
                where: { user: user },
                skip: (+params.page - 1) * 10,
                take: 10,
            })

            if (clientsPagination.length === 0) {
                ctx.answerCbQuery();
                ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            } else {

                const clientsListButtons = inlineButtonsPages(
                    clientsPagination.map(client => (
                        { text: `üë®‚Äçüíº ${client.fullName} | ${new Date(client.birthDate).toLocaleDateString()}`, callback: CommonCallbacks.GetClient, payload: { id: client.id } }
                    )),
                    {callback: CommonCallbacks.GetMyClients, page: +params.page, take: 10}
                )

                ctx.answerCbQuery();
                ctx.editMessageText('–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', clientsListButtons)
            }
        }
    }

    async onStartSearchClient(ctx: CustomContext) {
        ctx.session.searchClientInfo = {
            step: 'fullName',
            fullName: null,
            phone: null,
        }

        ctx.answerCbQuery();
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ –∏—â–µ—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)')
    }

    async onFillSearchClientInfo(ctx: CustomContext) {
        if (ctx.session?.searchClientInfo?.step === 'fullName') {
            ctx.session.searchClientInfo.fullName = ctx.message.text;
            ctx.session.searchClientInfo.step = 'phone';

            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)')
        } else if (ctx.session?.searchClientInfo?.step === 'phone') {
            ctx.session.searchClientInfo.phone = ctx.message.text;

            const searchingObj = {
                fullName: ctx.session.searchClientInfo.fullName !== '.' ? ctx.session.searchClientInfo.fullName : undefined,
                phone: ctx.session.searchClientInfo.phone !== '.' ? ctx.session.searchClientInfo.phone : undefined,
            }

            console.log(searchingObj)

            const clientsPagination = await this.clientRepository.find({
                where: {
                    fullName: searchingObj.fullName ? ILike(`%${searchingObj.fullName}%`) : undefined,
                    phone: searchingObj.phone ? ILike(`%${searchingObj.phone}%`) : undefined,
                },
                skip: 0,
                take: 10,
            })

            if (clientsPagination.length === 0) {
                ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            } else {
                const searchClientsList = inlineButtonsPages(
                    clientsPagination.map(client => (
                        {text: `üë®‚Äçüíº ${client.fullName} | ${new Date(client.birthDate).toLocaleDateString()}`, callback: CommonCallbacks.GetClient, payload: { id: client.id}}
                    )),
                    {callback: CommonCallbacks.ChangeSearchClientPage, payload: searchingObj, page: 1, take: 10 }
                )

                ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', searchClientsList)
            }

            ctx.session.searchClientInfo = undefined;
        }
    }

    async onChangeClientSearchPage(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            page: string,
            fullName: string;
            phone: string;
        }

        const searchingObj = {
            fullName: params.fullName,
            phone: params.phone,
        }

        const clientsPagination = await this.clientRepository.find({
            where: {
                fullName: searchingObj.fullName ? ILike(`%${searchingObj.fullName}%`) : undefined,
                phone: searchingObj.phone ? ILike(`%${searchingObj.phone}%`) : undefined,
            },
            skip: (+params.page - 1) * 10,
            take: 10,
        })

        if (clientsPagination.length === 0) {
            ctx.answerCbQuery();
            ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        } else {

            const searchClientsList = inlineButtonsPages(
                clientsPagination.map(client => (
                    {text: `üë®‚Äçüíº ${client.fullName} | ${new Date(client.birthDate).toLocaleDateString()}`, callback: CommonCallbacks.GetClient, payload: { id: client.id}}
                )),
                {callback: CommonCallbacks.ChangeSearchClientPage, payload: searchingObj, page: +params.page, take: 10 }
            )

            ctx.answerCbQuery();
            ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', searchClientsList)
        }
    }

    async getClientInfo(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            id: string;
        }

        const requestedClient = await this.clientRepository.findOne({
            where: { id: +params.id }
        })

        const clientControlButtons = inlineButtonsList([
            {text: 'üßë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞', callback: CommonCallbacks.GetClientPassportImages, payload: {clientId: requestedClient.id}},
            {text: 'ü§ù –ú–æ–∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',  callback: CommonCallbacks.GetMyPlansOfClient, payload: {clientId: requestedClient.id, userId: ctx.from.id}},
            {text: 'ü§ù –í—Å–µ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback: CommonCallbacks.GetAllClientPlans, payload: {page: 1, clientId: requestedClient.id}},
            {text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—Ä–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback: CommonCallbacks.CreatePlanToClient, payload: {clientId: requestedClient.id, userId: ctx.from.id}},
        ])

        ctx.answerCbQuery();
        ctx.editMessageText(clientInfoMessage(requestedClient), clientControlButtons)
    }


    async getClientsByUserId(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            id: string;
            page: string;
        }

        const user = await this.userRepository.findOne({ where: { id: +params.id } })

        const clientsPagination = await this.clientRepository.find({ where: { user } })

        if (clientsPagination.length === 0) {
            ctx.answerCbQuery();
            ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        } else {

            const clientPaginationButtons = inlineButtonsPages(
                clientsPagination.map(client => (
                    { text: client.fullName, callback: CommonCallbacks.GetClient, payload: { id: client.id } }
                )),
                {
                    callback: CommonCallbacks.GetClientsByUserId,
                    payload: { id: +params.id },
                    page: +params.page,
                    take: 10
                }
            )

            ctx.answerCbQuery();
            ctx.editMessageText('–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', clientPaginationButtons)
        }
    }

}