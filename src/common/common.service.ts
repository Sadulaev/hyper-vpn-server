import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { InjectBot } from "nestjs-telegraf";
import config from "src/config";
import { Client } from "./client.entity";
import { User } from "src/user/user.entity";
import { Context, Telegraf } from "telegraf";
import { ILike, Repository } from "typeorm";
import { CustomContext } from "types/context";
import callbackToObj from "utils/callbackToObj";
import saveFileFromTG from "utils/saveFileFromTG";
import clientInfoMessage from "messages/client-info.message";
import inlineButtonsPages from "button-templates/inlineButtonsPages";
import { CommonCallbacks } from "enums/callbacks.enum";
import inlineButtonsList from "button-templates/inlineButtonsList";
import planInfoMessage from "messages/plan-info.message";
import { Plan } from "./plan.entity";
import { PaymentStatus } from "enums/payment-status.enum";
import paymentStatusInfoMessage from "messages/payment-status-info.message";
import { ConfigService } from "@nestjs/config";
import userInfoMessage from "messages/user-info.message";
import { join } from 'path';
import * as path from 'path';
import { MediaGroup } from "telegraf/typings/telegram-types";

@Injectable()
export class CommonService {
    constructor(
        @InjectRepository(User) private userRepository: Repository<User>,
        @InjectRepository(Client) private clientRepository: Repository<Client>,
        @InjectRepository(Plan) private planRepository: Repository<Plan>,
        @InjectBot() private readonly bot: Telegraf<Context>,
        private readonly configService: ConfigService,
    ) { }

    // Common feature
    // -------------------------------------------------------------------------------------------------------
    async getMenu(ctx: CustomContext) {
        const buttons = inlineButtonsList([
            { text: 'üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –±–∞–∑–µ', callback: CommonCallbacks.FindClients },
            { text: '‚úç –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–ª–∏–µ–Ω—Ç—ã', callback: CommonCallbacks.GetClientsCreatedByMe, payload: { page: 1 } },
            { text: 'üíµ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', callback: CommonCallbacks.GetMyActiveClients, payload: { page: 1 } },
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', callback: CommonCallbacks.CreateClient },
            { text: 'üìÉ –í–∞—à–∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∏', callback: CommonCallbacks.GetMyPlans, payload: { page: 1 } }
        ])

        ctx.answerCbQuery();
        ctx.editMessageText('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∞–º–∏', buttons)
    }

    // User features
    // -------------------------------------------------------------------------------------------------------
    async getUserInfo(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as { id: string };

        const user = await this.userRepository.findOne({ where: { id: +params.id } });

        ctx.answerCbQuery();
        ctx.reply(userInfoMessage(user, false));
    }

    // Client features
    // -------------------------------------------------------------------------------------------------------

    beginClientCreating(ctx: CustomContext) {
        ctx.session.createClientInfo = {
            step: 'fullName',
            fullName: null,
            birthDate: null,
            images: [],
        }

        ctx.answerCbQuery();
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏)')
    }

    async onFillCreateClientInfo(ctx: CustomContext) {
        if (ctx.session?.createClientInfo) {
            if (ctx.session?.createClientInfo?.step === 'fullName') {
                ctx.session.createClientInfo.fullName = ctx.message.text;
                ctx.session.createClientInfo.step = 'birthDate';

                ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏)')
            } else if (ctx.session?.createClientInfo?.step === 'birthDate') {
                ctx.session.createClientInfo.birthDate = ctx.message.text;
                ctx.session.createClientInfo.step = 'phone'

                ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏)')
            } else if (ctx.session?.createClientInfo?.step === 'phone') {
                ctx.session.createClientInfo.phone = ctx.message.text === '.' ? null : ctx.message.text;
                ctx.session.createClientInfo.step = 'images';

                ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
            } else if (ctx.session?.createClientInfo?.step === 'images' && !ctx.message.photo) {
                const creator = await this.userRepository.findOne({ where: { id: ctx.message.from.id } })

                const newClient = new Client();

                newClient.fullName = ctx.session.createClientInfo.fullName;
                newClient.birthDate = ctx.session.createClientInfo.birthDate;
                newClient.phone = ctx.session.createClientInfo.phone;
                newClient.user = creator || null;

                await this.clientRepository.save(newClient);

                ctx.session.createClientInfo = undefined;
                ctx.reply('–ö–ª–∏–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
            }
        }
    }

    async onFillClientImages(ctx: CustomContext) {
        if (ctx.session?.createClientInfo?.step === 'images') {
            const savedImageName = await saveFileFromTG(ctx, this.bot);
            ctx.session.createClientInfo.images.push(savedImageName);

            if ((ctx.message.media_group_id && ctx.session.createClientInfo.images?.length === 2) || !ctx.message.media_group_id) {

                const creator = await this.userRepository.findOne({ where: { id: ctx.message.from.id } })

                const newClient = new Client();

                newClient.fullName = ctx.session.createClientInfo.fullName;
                newClient.birthDate = ctx.session.createClientInfo.birthDate;
                newClient.phone = ctx.session.createClientInfo.phone;
                newClient.user = creator || null;
                newClient.images = ctx.session.createClientInfo.images.length ? JSON.stringify({ documents: ctx.session.createClientInfo.images }) : null;

                await this.clientRepository.save(newClient);

                ctx.session.createClientInfo = undefined;
                ctx.reply('–ö–ª–∏–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
            }
        }
    }

    async getClientsCreatedByMe(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            page: string;
        };


        const user = await this.userRepository.findOne({ where: { id: ctx.callbackQuery.from.id } })

        if ((!user && ctx.callbackQuery.from.id === +config().tg.admin) || user) {
            const clientsPagination = await this.clientRepository.find({
                where: { user: user },
                skip: (+params.page - 1) * 10,
                take: 10,
            })

            if (clientsPagination.length === 0) {
                ctx.answerCbQuery();
                ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            } else {

                const clientsListButtons = inlineButtonsPages(
                    clientsPagination.map(client => (
                        { text: `üë®‚Äçüíº ${client.fullName} | ${new Date(client.birthDate).toLocaleDateString()}`, callback: CommonCallbacks.GetClient, payload: { id: client.id } }
                    )),
                    { callback: CommonCallbacks.GetClientsCreatedByMe, page: +params.page, take: 10 }
                )

                ctx.answerCbQuery();
                ctx.editMessageText('–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', clientsListButtons)
            }
        }
    }

    async getMyActiveClients(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as { page: string };

        const clientsPagination = await this.clientRepository
            .createQueryBuilder('client')
            .innerJoin('client.plans', 'plan') // –°–≤—è–∑—ã–≤–∞–µ–º Client —Å Plan
            .innerJoin('plan.user', 'user')   // –°–≤—è–∑—ã–≤–∞–µ–º Plan —Å User
            .where('user.id = :userId', { userId: ctx.from.id }) // –£—Å–ª–æ–≤–∏–µ –ø–æ userId
            .take(10)
            .skip((+params.page - 1) * 10)
            .getMany();

            if (clientsPagination.length === 0) {
                ctx.answerCbQuery();
                ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            } else {

                const clientsListButtons = inlineButtonsPages(
                    clientsPagination.map(client => (
                        { text: `üë®‚Äçüíº ${client.fullName} | ${new Date(client.birthDate).toLocaleDateString()}`, callback: CommonCallbacks.GetClient, payload: { id: client.id } }
                    )),
                    { callback: CommonCallbacks.GetMyActiveClients, page: +params.page, take: 10 }
                )

                ctx.answerCbQuery();
                ctx.editMessageText('–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', clientsListButtons)
            }
    }

    async onStartSearchClient(ctx: CustomContext) {
        ctx.session.searchClientInfo = {
            step: 'fullName',
            fullName: null,
            phone: null,
        }

        ctx.answerCbQuery();
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ –∏—â–µ—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)')
    }

    async onFillSearchClientInfo(ctx: CustomContext) {
        if (ctx.session?.searchClientInfo?.step === 'fullName') {
            ctx.session.searchClientInfo.fullName = ctx.message.text;
            ctx.session.searchClientInfo.step = 'phone';

            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ —Ç–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)')
        } else if (ctx.session?.searchClientInfo?.step === 'phone') {
            ctx.session.searchClientInfo.phone = ctx.message.text;

            const searchingObj = {
                fullName: ctx.session.searchClientInfo.fullName !== '.' ? ctx.session.searchClientInfo.fullName : undefined,
                phone: ctx.session.searchClientInfo.phone !== '.' ? ctx.session.searchClientInfo.phone : undefined,
            }

            console.log(searchingObj)

            const clientsPagination = await this.clientRepository.find({
                where: {
                    fullName: searchingObj.fullName ? ILike(`%${searchingObj.fullName}%`) : undefined,
                    phone: searchingObj.phone ? ILike(`%${searchingObj.phone}%`) : undefined,
                },
                skip: 0,
                take: 10,
            })

            if (clientsPagination.length === 0) {
                ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            } else {
                const searchClientsList = inlineButtonsPages(
                    clientsPagination.map(client => (
                        { text: `üë®‚Äçüíº ${client.fullName} | ${new Date(client.birthDate).toLocaleDateString()}`, callback: CommonCallbacks.GetClient, payload: { id: client.id } }
                    )),
                    { callback: CommonCallbacks.ChangeSearchClientPage, payload: searchingObj, page: 1, take: 10 }
                )

                ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', searchClientsList)
            }

            ctx.session.searchClientInfo = undefined;
        }
    }

    async onChangeClientSearchPage(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            page: string,
            fullName: string;
            phone: string;
        }

        const searchingObj = {
            fullName: params.fullName,
            phone: params.phone,
        }

        const clientsPagination = await this.clientRepository.find({
            where: {
                fullName: searchingObj.fullName ? ILike(`%${searchingObj.fullName}%`) : undefined,
                phone: searchingObj.phone ? ILike(`%${searchingObj.phone}%`) : undefined,
            },
            skip: (+params.page - 1) * 10,
            take: 10,
        })

        if (clientsPagination.length === 0) {
            ctx.answerCbQuery();
            ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        } else {

            const searchClientsList = inlineButtonsPages(
                clientsPagination.map(client => (
                    { text: `üë®‚Äçüíº ${client.fullName} | ${new Date(client.birthDate).toLocaleDateString()}`, callback: CommonCallbacks.GetClient, payload: { id: client.id } }
                )),
                { callback: CommonCallbacks.ChangeSearchClientPage, payload: searchingObj, page: +params.page, take: 10 }
            )

            ctx.answerCbQuery();
            ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', searchClientsList)
        }
    }

    async getClientInfo(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            id: string;
        }

        const requestedClient = await this.clientRepository.findOne({
            where: { id: +params.id }
        })

        const clientControlButtons = inlineButtonsList([
            { text: 'üßë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞', callback: CommonCallbacks.GetClientPassportImages, payload: { clientId: requestedClient.id } },
            { text: 'ü§ù –ú–æ–∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback: CommonCallbacks.GetMyPlansOfClient, payload: { page: 1, clientId: requestedClient.id, userId: ctx.from.id } },
            { text: 'ü§ù –í—Å–µ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback: CommonCallbacks.GetAllClientPlans, payload: { page: 1, clientId: requestedClient.id } },
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—Ä–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback: CommonCallbacks.CreatePlanToClient, payload: { clientId: requestedClient.id, userId: ctx.from.id } },
        ])

        ctx.answerCbQuery();
        ctx.editMessageText(clientInfoMessage(requestedClient), clientControlButtons)
    }


    async getClientsByUserId(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            id: string;
            page: string;
        }

        const user = await this.userRepository.findOne({ where: { id: +params.id } })

        const clientsPagination = await this.clientRepository.find({ where: { user } })

        if (clientsPagination.length === 0) {
            ctx.answerCbQuery();
            ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        } else {

            const clientPaginationButtons = inlineButtonsPages(
                clientsPagination.map(client => (
                    { text: client.fullName, callback: CommonCallbacks.GetClient, payload: { id: client.id } }
                )),
                {
                    callback: CommonCallbacks.GetClientsByUserId,
                    payload: { id: +params.id },
                    page: +params.page,
                    take: 10
                }
            )

            ctx.answerCbQuery();
            ctx.editMessageText(`–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - ${user.name}`, clientPaginationButtons)
        }
    }

    async getClientPassportImages(ctx: CustomContext) {
        try {
            const params = callbackToObj(ctx.update.callback_query.data) as { clientId: string };

            const client = await this.clientRepository.findOne({ where: { id: +params.clientId } });

            const documentImages = JSON.parse(client.images) as { documents: string[] };

            const saveDirectory = path.join(process.cwd(), 'uploads');

            const mediaGroup: MediaGroup = documentImages.documents.map(fileName => ({
                type: 'photo',
                media: { source: join(saveDirectory, fileName) }
            }))

            ctx.answerCbQuery();
            await ctx.replyWithMediaGroup(mediaGroup);
        } catch (error) {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.');
        }

    }

    // Plan features
    // ------------------------------------------------------------------------------------------------------
    onStartCreatingPlan(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            clientId: string;
            userId: string;
        }

        ctx.session.createPlanInfo = {
            step: 'title',
            title: null,
            description: null,
            sum: null,
            startDate: null,
            endDate: null,
            paymentStatus: null,
            clientId: +params.clientId,
            userId: +params.userId
        }

        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ (—É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)')
    }

    onFillCreatePlanInfo(ctx: CustomContext) {
        if (ctx.session.createPlanInfo) {
            if (ctx.session.createPlanInfo.step === 'title') {
                ctx.session.createPlanInfo.title = ctx.message.text;
                ctx.session.createPlanInfo.step = 'description';

                ctx.reply('–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ä–∞—Å—Ä–æ—á–∫—É. –£–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å')
            } else if (ctx.session.createPlanInfo.step === 'description') {
                ctx.session.createPlanInfo.description = ctx.message.text;
                ctx.session.createPlanInfo.step = 'sum';

                ctx.reply('–£–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Å—Ä–æ—á–∫–∏')
            } else if (ctx.session.createPlanInfo.step === 'sum') {
                ctx.session.createPlanInfo.sum = ctx.message.text;
                ctx.session.createPlanInfo.step = 'startDate';

                ctx.reply('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')
            } else if (ctx.session.createPlanInfo.step === 'startDate') {
                ctx.session.createPlanInfo.startDate = ctx.message.text;
                ctx.session.createPlanInfo.step = 'endDate';

                ctx.reply('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—Ä–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')
            } else if (ctx.session.createPlanInfo.step === 'endDate') {
                ctx.session.createPlanInfo.startDate = ctx.message.text;
                ctx.session.createPlanInfo.step = 'paymentStatus';

                const buttons = inlineButtonsList([
                    { text: '–ê–∫—Ç–∏–≤–Ω–∞', callback: CommonCallbacks.CreatePlanWithActiveStatus },
                    { text: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞', callback: CommonCallbacks.CreatePlanWithExpiredStatus },
                    { text: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞', callback: CommonCallbacks.CreatePlanWithFreezedStatus },
                    { text: '–ó–∞–∫—Ä—ã—Ç–∞', callback: CommonCallbacks.CreatePlanWithClosedStatus },
                ])

                ctx.reply(`–ò –Ω–∞–∫–æ–Ω–µ—Ü - —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π —Ä–∞—Å—Å—Ä–æ—á–∫–∏\n\n${paymentStatusInfoMessage()}`, buttons)
            }
        }
    }

    async createPlan(ctx: CustomContext) {
        const newPlan = new Plan();

        newPlan.title = ctx.session.createPlanInfo.title;
        newPlan.description = ctx.session.createPlanInfo.description;
        newPlan.sum = ctx.session.createPlanInfo.sum;
        newPlan.startDate = ctx.session.createPlanInfo.startDate;
        newPlan.endDate = ctx.session.createPlanInfo.endDate;
        newPlan.paymentStatus = ctx.session.createPlanInfo.paymentStatus;

        const client = await this.clientRepository.findOne({ where: { id: +ctx.session.createPlanInfo.clientId } })
        newPlan.client = client;

        const user = await this.userRepository.findOne({ where: { id: +ctx.session.createPlanInfo.userId } })
        newPlan.user = user;

        await this.planRepository.save(newPlan);

        ctx.answerCbQuery();
        ctx.editMessageText('–†–∞—Å—Å—Ä–æ—á–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        ctx.session = {};
    }

    async onCreateActivePlan(ctx: CustomContext) {
        if (ctx.session.createPlanInfo && ctx.session.createPlanInfo.step === 'paymentStatus') {
            ctx.session.createPlanInfo.paymentStatus = PaymentStatus.Active;

            await this.createPlan(ctx);
        }
    }

    async onCreateExpiredPlan(ctx: CustomContext) {
        if (ctx.session.createPlanInfo && ctx.session.createPlanInfo.step === 'paymentStatus') {
            ctx.session.createPlanInfo.paymentStatus = PaymentStatus.Expired;

            await this.createPlan(ctx);
        }
    }

    async onCreateFreezedPlan(ctx: CustomContext) {
        if (ctx.session.createPlanInfo && ctx.session.createPlanInfo.step === 'paymentStatus') {
            ctx.session.createPlanInfo.paymentStatus = PaymentStatus.Freezed;

            await this.createPlan(ctx);
        }
    }

    async onCreateClosedPlan(ctx: CustomContext) {
        if (ctx.session.createPlanInfo && ctx.session.createPlanInfo.step === 'paymentStatus') {
            ctx.session.createPlanInfo.paymentStatus = PaymentStatus.Closed;

            await this.createPlan(ctx);
        }
    }

    async getClientPlans(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as {
            page: string;
            clientId: string;
            userId?: string;
        };

        console.log('get client params', params)

        const user = params.userId ? await this.userRepository.findOne({ where: { id: +params.userId } }) : undefined;
        const client = params.clientId ? await this.clientRepository.findOne({ where: { id: +params.clientId } }) : undefined;

        const plansByPagination = await this.planRepository.find({
            where: {
                user: user ? { id: user.id } : undefined,
                client: client ? { id: client.id } : undefined
            },
            skip: (+params.page - 1) * 10,
            take: 10,
        })

        if (plansByPagination.length === 0) {
            ctx.answerCbQuery();
            ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        } else {

            const clientPlansButtons = inlineButtonsPages(
                plansByPagination.map(plan => (
                    { text: plan.title, callback: CommonCallbacks.GetPlan, payload: { id: plan.id } }
                )),
                { callback: CommonCallbacks.GetMyPlansOfClient, payload: { clientId: +params.clientId, userId: +params.userId }, page: +params.page, take: 10 }
            )

            ctx.answerCbQuery();
            ctx.editMessageText(`–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–µ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ - ${client.fullName}`, clientPlansButtons)
        }
    }

    async getPlanById(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as { id: string }

        const plan = await this.planRepository.findOne({ where: { id: +params.id }, relations: ['user'] })

        const isMyClientsPlan = ctx.from.id === plan.user.id;
        const isEditable = (ctx.from.id === +this.configService.get<string>('tg.admin')) || isMyClientsPlan;

        const buttons = inlineButtonsList([
            { text: '–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—Ä–æ—á–∫–∏', callback: CommonCallbacks.ChangePlanPaymentStatus, payload: { id: plan.id }, hide: !isEditable },
            { text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤—à–µ–º —Ä–∞—Å—Å—Ä–æ—á–∫—É', callback: CommonCallbacks.GetUserById, payload: { id: plan.user.id }, hide: isMyClientsPlan },

        ])

        ctx.editMessageText(planInfoMessage(plan), buttons)
    }

    async getMyPlans(ctx: CustomContext) {
        const params = callbackToObj(ctx.update.callback_query.data) as { page: string };

        const plansByPagination = await this.planRepository.find({
            where: {
                user: { id: ctx.from.id },
            },
            skip: (+params.page - 1) * 10,
            take: 10,
        })

        if (plansByPagination.length === 0) {
            ctx.answerCbQuery();
            ctx.reply('‚ö† –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        } else {

            const clientPlansButtons = inlineButtonsPages(
                plansByPagination.map(plan => (
                    { text: plan.title, callback: CommonCallbacks.GetPlan, payload: { id: plan.id } }
                )),
                { callback: CommonCallbacks.GetMyPlans, page: +params.page, take: 10 }
            )

            ctx.answerCbQuery();
            ctx.editMessageText(`–í–∞—à–∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∏`, clientPlansButtons)
        }
    }

}