import { Injectable } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';
import { CustomContext } from 'types/context';
import callbackToObj from 'utils/callbackToObj';
import { CommonCallbacks } from 'enums/callbacks.enum';
import inlineButtonsList from 'button-templates/inlineButtonsList';


import { ConfigService } from '@nestjs/config';
import getPaymentURL from 'utils/getPaymentURL';
import { createReadStream } from 'fs';
import { join } from 'path';
import { deleteLastMessageIfExist } from 'utils/deleteMessage';
import { PaymentsService } from 'src/payments/payments.service';
import { formatDateToLocal } from 'utils/formatDateToLocal';

@Injectable()
export class BotService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly configService: ConfigService,
    private readonly paymentsService: PaymentsService
  ) { }

  // Default actions
  // -------------------------------------------------------------------------------------------------------

  async onStart(ctx: CustomContext) {
    // this.bot.telegram.setMyCommands([{
    //   command: 'start',
    //   description: '–°—Ç–∞—Ä—Ç'
    // },
    // {
    //   command: '/tech-support',
    //   description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'
    // }]);


    this.bot.telegram.callApi('setMyCommands', {
      commands: [{ command: '/start', description: '–°—Ç–∞—Ä—Ç' }],
    });

    const buttons = Markup.inlineKeyboard([
      {
        text: '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VPN üõú',
        callback_data: CommonCallbacks.GetVPNSubscriptions,
      },
      {
        text: '–ú–æ–∏ –∫–ª—é—á–∏ üîë',
        callback_data: CommonCallbacks.GetMyKeys
      },
      {
        text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Hyper VPN üìç',
        callback_data: CommonCallbacks.GetInstructions,
      },
      {
        text: '–¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ö†Ô∏è',
        url: 'https://t.me/hyper_vpn_help'
      }
    ], { columns: 1 });

    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-menu.jpg');
    ctx.replyWithPhoto({ source: createReadStream(filePath) }, { caption: '‚ö° Hyper VPN  ‚Äì –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö¬†—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.', reply_markup: buttons.reply_markup });
  }

  async getMenu(ctx: CustomContext, saveMessage?: boolean) {
    const buttons = Markup.inlineKeyboard([
      {
        text: '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VPN üõú',
        callback_data: CommonCallbacks.GetVPNSubscriptions,
      },
      {
        text: '–ú–æ–∏ –∫–ª—é—á–∏ üîë',
        callback_data: CommonCallbacks.GetMyKeys
      },
      {
        text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Hyper VPN üìç',
        callback_data: CommonCallbacks.GetInstructions,
      },
      {
        text: '–¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ö†Ô∏è',
        url: 'https://t.me/hyper_vpn_help'
      }
    ], { columns: 1 });

    ctx.answerCbQuery();
    if (!saveMessage) {
      deleteLastMessageIfExist(ctx);
    }
    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-menu.jpg');
    ctx.replyWithPhoto({ source: createReadStream(filePath) }, { caption: '‚ö° Hyper VPN  ‚Äì –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö¬†—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.', reply_markup: buttons.reply_markup });
    // ctx.editMessageText('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∞–º–∏', buttons);
  }

  // End of default actions -----------------------------------------------------------------------------------

  // Buy VPN actions ------------------------------------------------------------------------------------------

  async getSubscriptions(ctx: CustomContext) {
    const buttons = Markup.inlineKeyboard([
      {
        text: '1 –º–µ—Å—è—Ü - 189‚ÇΩ',
        callback_data: CommonCallbacks.GetOneMonthKey,
      },
      {
        text: '3 –º–µ—Å—è—Ü–∞ - 449‚ÇΩ',
        callback_data: CommonCallbacks.GetThreeMonthKey,
      },
      {
        text: '6 –º–µ—Å—è—Ü–µ–≤ - 699‚ÇΩ',
        callback_data: CommonCallbacks.GetSixMonthKey,
      },
      {
        text: '12 –º–µ—Å—è—Ü–µ–≤ - 1499‚ÇΩ',
        callback_data: CommonCallbacks.GetTwelweMonthKey,
      },
      {
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetMenu
      },
    ], { columns: 1 });

    const replyText = `1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µüëáüèª
2Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ–¥–∏ –æ–ø–ª–∞—Ç—É
3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏ VPN –Ω–∞ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 

‚ùóÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã–¥–∞–¥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ Iphone, Android, –ü–ö, TV

üí°–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø–ª–∞–Ω—à–µ—Ç –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä`

    ctx.answerCbQuery();
    deleteLastMessageIfExist(ctx);
    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-subscriptions.jpg');
    ctx.replyWithPhoto({ source: createReadStream(filePath) }, { caption: replyText, reply_markup: buttons.reply_markup });
  }

  async getPaymentLink(ctx: CustomContext, period: number, sum: number) {

    let filePath: string;

    if (period === 3) {
      filePath = join(__dirname, '..', 'assets', 'hyper-vpn-three-m.jpg');
    } else if (period === 6) {
      filePath = join(__dirname, '..', 'assets', 'hyper-vpn-six-m.jpg');
    } else if (period === 12) {
      filePath = join(__dirname, '..', 'assets', 'hyper-vpn-twelwe-m.jpg');
    } else {
      filePath = join(__dirname, '..', 'assets', 'hyper-vpn-one-m.jpg');
    }

    const session = await this.paymentsService.createSession({
      telegramId: ctx.update.callback_query.from.id.toString(),
      ttlMinutes: 30,
      period,
      firstName: ctx.update.callback_query.from.first_name?.toString(),
      userName: ctx.update.callback_query.from.username?.toString()
    });

    const paymentURL = await getPaymentURL({
      mrh_login: this.configService.get('ROBOKASSA_MERCHANT_ID'),
      mrh_pass1: this.configService.get('ROBOKASSA_MERCHANT_PASSWORD_1'),
      mrh_pass2: this.configService.get('ROBOKASSA_MERCHANT_PASSWORD_2'),
      inv_id: Number(session.invId),
      inv_desc: '123',
      out_summ: sum.toString(),
      shp_order: session.id,
    })

    const buttons = Markup.inlineKeyboard([
      {
        text: ' üí≥ –û–ø–ª–∞—Ç–∏—Ç—å',
        url: paymentURL
      },
      {
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetVPNSubscriptions
      }
    ]);

    ctx.answerCbQuery();
    deleteLastMessageIfExist(ctx);
    await ctx.replyWithPhoto(
      { source: createReadStream(filePath) },
      {
        caption: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã',
        reply_markup: buttons.reply_markup,
      }
    )
  }
  // End of buy VPN actions --------------------------------------------------------------------------

  // Get Instructions actions ------------------------------------------------------------------------
  async getInstructions(ctx: CustomContext, saveMessage?: boolean) {

    const buttons = Markup.inlineKeyboard([
      {
        text: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ IPhone Ô£ø',
        callback_data: CommonCallbacks.GetIphoneInstructions,
      },
      {
        text: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ Android ü§ñ',
        callback_data: CommonCallbacks.GetAndroidInstructions,
      },
      {
        text: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ö–æ–º–ø—å—é—Ç–µ—Ä üíª',
        callback_data: CommonCallbacks.GetPCInstructions,
      },
      {
        text: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ TV üì∫',
        callback_data: CommonCallbacks.GetTVInstructions,
      },
      {
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetMenu
      },
    ], { columns: 1 });

    const caption = `üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:

1. üì± –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:

   - Ô£ø –î–ª—è iPhone: <a href="https://apps.apple.com/ru/app/v2raytun/id6476628951">V2RayTun</a>
   - –î–ª—è Android: <a href="https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=ru">V2RayTun</a>
   - üíª –î–ª—è –ö–æ–º–ø—å—é—Ç–µ—Ä–∞: <a href="https://hiddify.com">Hiddify Next</a>
   - üì∫ –î–ª—è TV:  <a href="https://play.google.com/store/apps/details?id=com.vpn4tv.hiddify">VPN4TV</a>

2. üîë –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–Ω–µ–µ.

3. üì≤ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ —Å–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞.

4. üìã –í—ã–±–µ—Ä–∏—Ç–µ '–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.

üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É <a href="https://t.me/hyper_vpn_help">@hyper_vpn_help</a>`;


    ctx.answerCbQuery();
    if (!saveMessage) {
      deleteLastMessageIfExist(ctx);
    }
    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-instructions.jpg');

    await ctx.replyWithPhoto(
      { source: createReadStream(filePath) },
      {
        caption,
        parse_mode: 'HTML',
        reply_markup: buttons.reply_markup,
      }
    );
  }

  async getPCInstructions(ctx: CustomContext) {

    const buttons = Markup.inlineKeyboard([
      {
        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: CommonCallbacks.GetInstructions
      },
      {
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetInstructions
      },
    ], { columns: 1 });
    const caption = `üíª <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ –ü–ö (Windows)</b>

üîë <b>1.</b> –ö—É–ø–∏—Ç–µ –∫–ª—é—á.

üì¶ <b>2.</b> –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify Next:
üëâ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:
<a href="https://hiddify.com">–°–∫–∞—á–∞—Ç—å Hiddify –¥–ª—è Windows (.msix —Ñ–∞–π–ª)</a>

üõ† <b>3.</b> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
–û—Ç–∫—Ä–æ–π—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª. –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å¬ª.

üñ•Ô∏è <b>4.</b> –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–≤–µ—Ä—Ö—É –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª <i>–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å</i>, –∑–∞—Ç–µ–º ¬´<i>–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞</i>¬ª.

üåê <b>5.</b> –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (Connect)¬ª ‚Äî VPN –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.`;


    ctx.answerCbQuery();
    deleteLastMessageIfExist(ctx);
    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-instructions.jpg');

    await ctx.replyWithPhoto(
      { source: createReadStream(filePath) },
      {
        caption,
        parse_mode: 'HTML',
        reply_markup: buttons.reply_markup,
      }
    );
  }

  async getAndroidInstructions(ctx: CustomContext) {

    const buttons = Markup.inlineKeyboard([
      {
        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: CommonCallbacks.GetInstructions
      },
      {
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetInstructions
      },
    ], { columns: 1 });

    const caption = `ü§ñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ Android</b>

üîë <b>1.</b> –ö—É–ø–∏—Ç–µ –∫–ª—é—á.

üì¶ <b>2.</b> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTun:
üëâ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Google Play:
<a href="https://play.google.com/store/apps/details?id=com.v2ray.tun">V2RayTun –≤ Google Play</a>

üì≤ <b>3.</b> –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ —Å–ø—Ä–∞–≤–∞ –Ω–∞–≤–µ—Ä—Ö—É –ø–ª—é—Å ‚Äî ¬´<i>–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞</i>¬ª.

‚öôÔ∏è <b>4.</b> –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.

‚ñ∂Ô∏è <b>5.</b> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ ‚Äî VPN –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.`;


    ctx.answerCbQuery();
    deleteLastMessageIfExist(ctx);
    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-instructions.jpg');

    await ctx.replyWithPhoto(
      { source: createReadStream(filePath) },
      {
        caption,
        parse_mode: 'HTML',
        reply_markup: buttons.reply_markup,
      }
    );
  }

  async getIphoneInstructions(ctx: CustomContext) {

    const buttons = Markup.inlineKeyboard([
      {
        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: CommonCallbacks.GetInstructions
      },
      {
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetInstructions
      },
    ], { columns: 1 });

    const caption = `Ô£ø <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ iPhone</b>

üîë <b>1.</b> –ö—É–ø–∏—Ç–µ –∫–ª—é—á.

üì¶ <b>2.</b> –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTun:
üëâ –æ—Ç–∫—Ä—ã—Ç—å App Store –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:
<a href="https://apps.apple.com/ru/app/v2raytun/id6476628951">V2RayTun –≤ App Store</a>

üì≤ <b>3.</b> –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∫—É–ø–ª–µ–Ω–Ω—ã–π –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ —Å–ø—Ä–∞–≤–∞ –Ω–∞–≤–µ—Ä—Ö—É –ø–ª—é—Å ‚Äî ¬´<i>–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞</i>¬ª.

‚öôÔ∏è <b>4.</b> –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.

‚ñ∂Ô∏è <b>5.</b> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ ‚Äî VPN –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.`;


    ctx.answerCbQuery();
    deleteLastMessageIfExist(ctx);
    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-instructions.jpg');

    await ctx.replyWithPhoto(
      { source: createReadStream(filePath) },
      {
        caption,
        parse_mode: 'HTML',
        reply_markup: buttons.reply_markup,
      }
    );
  }

  // Other actions
  async getMyKeys(ctx: CustomContext) {
    const myRecords = await this.paymentsService.getPaidAndNotExpiredKeysByTgId(ctx.update.callback_query.from.id.toString())

    const buttons = Markup.inlineKeyboard([
      {
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetMenu
      },
    ], { columns: 1 });

    const message = !myRecords.length ? `<b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</b>

–ï—Å–ª–∏ –≤—ã –∫—É–ø–∏–ª–∏ –∫–ª—é—á –∏ –æ–Ω –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É 

<a href="https://t.me/hyper_vpn_help">@hyper_vpn_help</a>`

      :

      `<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏</b>
    ${myRecords.map((record, index) => `

<b><i>–ö–ª—é—á ${index + 1}</i></b>
<pre>${record.vlessKey}</pre>
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è - ${formatDateToLocal(record.createdAt, true)}

–ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ - ${formatDateToLocal(record.keyExpiresAt, true)}`)}`

  ctx.answerCbQuery();
  deleteLastMessageIfExist(ctx);
  ctx.reply(message, {parse_mode: 'HTML', reply_markup: buttons.reply_markup});
  }

}