import { Injectable } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';
import { CustomContext } from 'types/context';
import callbackToObj from 'utils/callbackToObj';
import { CommonCallbacks } from 'enums/callbacks.enum';
import inlineButtonsList from 'button-templates/inlineButtonsList';


import { ConfigService } from '@nestjs/config';
import getPaymentURL from 'utils/getPaymentURL';
import { createReadStream } from 'fs';
import { join } from 'path';

@Injectable()
export class BotService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly configService: ConfigService,
  ) { }

  // Common feature
  // -------------------------------------------------------------------------------------------------------
  async getMenu(ctx: CustomContext) {
    const buttons = Markup.inlineKeyboard([
      {
        text: '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VPN üõú',
        callback_data: CommonCallbacks.GetVPNSubscriptions,
      },
      {
        text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Hyper VPN üìç',
        callback_data: CommonCallbacks.GetInstructions,
      },
      {
        text: '–¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ö†Ô∏è',
        url: 'https://t.me/hyper_vpn_help'
      }
    ], { columns: 1 });

    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-menu.jpg');
    ctx.replyWithPhoto({ source: createReadStream(filePath) }, { caption: 'HyperVPN - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –Ω–∞ –¥–∏–∫–æ–º –∑–∞–ø–∞–¥–µ', reply_markup: buttons.reply_markup });
    // ctx.editMessageText('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∞–º–∏', buttons);
  }


  async getSubscriptions(ctx: CustomContext) {
    const buttons = Markup.inlineKeyboard([
      {
        text: '–ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü - 189‚ÇΩ',
        callback_data: CommonCallbacks.GetVPNKey,
      },
      {
        text: '–ö—É–ø–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ - 449‚ÇΩ',
        callback_data: CommonCallbacks.GetVPNKey,
      },
      {
        text: '–ö—É–ø–∏—Ç—å –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ - 699‚ÇΩ',
        callback_data: CommonCallbacks.GetVPNKey,
      },
      {
        text: '–ö—É–ø–∏—Ç—å –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ - 1499‚ÇΩ',
        callback_data: CommonCallbacks.GetVPNKey,
      },
      {
        text: '–ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetMenu
      },
    ], { columns: 1 });

    const replyText = `1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µüëáüèª
2Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ–¥–∏ –æ–ø–ª–∞—Ç—É
3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏ VPN –Ω–∞ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 

‚ùóÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã–¥–∞–¥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ Iphone, Android, –ü–ö, TV

üí°–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø–ª–∞–Ω—à–µ—Ç –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä`

    ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    const filePath = join(__dirname, '..', 'assets', 'hyper-vpn-subscriptions.jpg');
    ctx.replyWithPhoto({ source: createReadStream(filePath) }, { caption: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ', reply_markup: buttons.reply_markup });
  }

  async getPaymentLink(ctx: CustomContext) {
    const params = callbackToObj(ctx.update.callback_query.data) as {
      period: string;
    };

    const merchantConfig = {
      merchantLogin: this.configService.get('ROBOKASSA_MERCHANT_ID'),
      hashingAlgorithm: 'sha256',
      password1: this.configService.get('ROBOKASSA_MERCHANT_PASSWORD_1'),
      password2: this.configService.get('ROBOKASSA_MERCHANT_PASSWORD_2'),

      // OPTIONAL CONFIGURATION
      testMode: true, // Whether to use test mode globally
      resultUrlRequestMethod: 'POST' // HTTP request method selected for "ResultURL" requests

    };

    const paymentURL = await getPaymentURL({
      mrh_login: this.configService.get('ROBOKASSA_MERCHANT_ID'),
      mrh_pass1: this.configService.get('ROBOKASSA_MERCHANT_PASSWORD_1'),
      mrh_pass2: this.configService.get('ROBOKASSA_MERCHANT_PASSWORD_2'),
      inv_id: Date.now(),
      inv_desc: '–ü–æ–∫—É–ø–∫–∞ VPN',
      out_summ: '1'
    })

    const buttons = Markup.inlineKeyboard([
      {
        text: '–û–ø–ª–∞—Ç–∏—Ç—å',
        url: paymentURL
      },
      {
        text: '–ù–∞–∑–∞–¥',
        callback_data: CommonCallbacks.GetVPNSubscriptions
      }
    ]);

    ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    ctx.reply(`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã`, buttons);
  }
}
